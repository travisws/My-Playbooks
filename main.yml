---
- name: Setup Ubuntu Server
  hosts: ubuntu
  become: true
  vars:
    zram_size: "100G"
    swapon_priority: 100
    swappiness: 100

  tasks:
    - name: Remove remaining snap directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ ansible_env.HOME }}/snap"
        - "/var/snap"
        - "/var/lib/snapd"
        - "/var/cache/snapd"

    - name: Update apt cache and upgrade packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: true
        cache_valid_time: 3600  # Optional: cache valid for 1 hour

    - name: Install Necessary Packages
      ansible.builtin.apt:
        name:
          - htop
          - git
          - vim
          - tmux
          - nut
          - qemu-kvm
          - libvirt-daemon-system
          - libvirt-clients
          - bridge-utils
          - cockpit
          - cockpit-machines
          - zram-config
        state: present

    - name: Autoremove unnecessary packages
      ansible.builtin.apt:
        autoremove: true

    # ZFS install and load of module
    - name: Install ZFS utilities
      ansible.builtin.apt:
        name: zfsutils-linux
        state: present

    - name: Check if ZFS module is loaded
      ansible.builtin.command: modinfo zfs
      register: modinfo_zfs
      failed_when: modinfo_zfs.rc != 0
      changed_when: false

    - name: Load ZFS module
      community.general.modprobe:
        name: zfs
        state: present
      when: modinfo_zfs.rc != 0

    - name: Ensure ZFS services are enabled and running
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - zfs-import-cache
        - zfs-import-scan
        - zfs-mount
        - zfs-share
        - zfs-zed
        - zfs.target

# Create if ZFS datasets exist if not create them
    - name: List all ZFS datasets
      ansible.builtin.command: zfs list -H -o name
      register: zfs_list_output
      changed_when: false

    - name: Check dataset existence and create if not exists
      block:
        - name: Set fact for dataset existence
          set_fact:
            dataset_exists: "{{ item in zfs_list_output.stdout_lines }}"
          loop:
            - data/palworld
            - data/nextcloud
            - data/nextcloud/mariadb-data
            - data/docker
            - data/family
            - data/family/Emileigh
            - data/family/Mom
          register: dataset_existence_check

        - name: Create ZFS dataset
          community.general.zfs:
            name: "{{ item.item }}"
            state: present
          loop: "{{ dataset_existence_check.results }}"
          when: not item.ansible_facts.dataset_exists
          loop_control:
            label: "{{ item.item }}"
      tags: create_datasets

# Nextcloud dataset properties
    - name: Set properties for 'data/nextcloud' dataset
      community.general.zfs:
        name: data/nextcloud
        state: present
        extra_zfs_properties:
          atime: off
          compression: lz4
          checksum: sha256

# palworld dataset properties
    - name: Set properties for 'data/palworld' dataset
      community.general.zfs:
        name: data/nextcloud
        state: present
        extra_zfs_properties:
          atime: off
          compression: lz4
          checksum: sha256

# Nextcloud dataset properties
    - name: Set properties for 'data/nextcloud/mariadb-data' dataset
      community.general.zfs:
        name: data/nextcloud/mariadb-data
        state: present
        extra_zfs_properties:
          mountpoint: /data/nextcloud/mariadb-data
          logbias: latency
          recordsize: 32K
          atime: off
          compression: lz4
          checksum: sha256
          redundant_metadata: most
          primarycache: metadata

# Emileigh dataset properties
    - name: Set properties for '/data/family/Mom' dataset
      community.general.zfs:
        name: data/family/Mom
        state: present
        extra_zfs_properties:
          mountpoint: /data/family/Mom
          recordsize: 128K
          atime: off
          compression: gzip-9
          checksum: sha256

# Emileigh dataset properties
    - name: Set properties for '/data/family/Emileigh' dataset
      community.general.zfs:
        name: data/family/Emileigh
        state: present
        extra_zfs_properties:
          mountpoint: /data/family/Emileigh
          recordsize: 128K
          atime: off
          compression: gzip-9
          checksum: sha256

#Docker dataset properties
    - name: Ensure Docker directory exists
      ansible.builtin.file:
        path: /var/lib/docker
        state: directory

    - name: Set properties for 'data/docker' dataset
      community.general.zfs:
        name: data/docker
        state: present
        extra_zfs_properties:
          mountpoint: /var/lib/docker
          recordsize: 8K
          compression: lz4
          atime: off
          checksum: sha256

    - name: Configure Docker to use ZFS storage driver
      ansible.builtin.blockinfile:
        path: /etc/docker/daemon.json
        create: yes
        block: |
          {
            "storage-driver": "zfs",
            "data-root": "/var/lib/docker"
          }
      notify: restart docker

# Add 'deathpoolops' user to 'docker' group
    - name: Add 'deathpoolops' user to 'docker' group
      ansible.builtin.user:
        name: deathpoolops
        groups: docker
        append: true

    - name: Start and enable Cockpit service
      ansible.builtin.systemd:
        name: cockpit.socket
        state: started
        enabled: true
        daemon_reload: true

# Set ZFS ARC size for max and min size
    - name: Ensure ZFS is installed (Ubuntu 23.10)
      ansible.builtin.apt:
        name: zfsutils-linux
        state: present
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '23.10'

    - name: Set ZFS ARC max size to 100GB
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/zfs.conf
        line: 'options zfs zfs_arc_max=107374182400'
        create: true
        mode: "0600"
      notify: Reload ZFS settings

    - name: Set ZFS ARC min size to 30GB
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/zfs.conf
        line: 'options zfs zfs_arc_min=32212254720'  # 30GB in bytes
        create: true
        mode: "0600"
      notify: Reload ZFS settings

# Configure SSH port and disable password authentication
    - name: Change SSH port
      ansible.builtin.lineinfile:
        path: /lib/systemd/system/ssh.socket
        regexp: '^#?ListenStream=22'
        line: "ListenStream=8080"
        state: present
      notify: Restart ssh service

    - name: Disable password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config.d/50-cloud-init.conf
        regexp: '^#?PasswordAuthentication'
        line: "PasswordAuthentication no"
        state: present
      notify: Restart ssh service

# Configure network settings
    - name: Configure network settings
      template:
        src: Temps/netplan-config.j2
        dest: /etc/netplan/50-cloud-init.yaml
      notify: Apply Netplan

# NUT UPS configuration
    - name: Configure UPS
      ansible.builtin.blockinfile:
        path: /etc/nut/ups.conf
        block: |
          [apcups]
          driver = usbhid-ups
          port = auto
          desc = "APC UPS 1500"
          create: true

    - name: Set NUT permissions
      ansible.builtin.blockinfile:
        path: /etc/nut/upsd.users
        block: |
          [admin]
          password = your_password
          actions = SET
          instcmds = ALL
          upsmon master

    - name: Configure UPS monitoring for shutdown
      ansible.builtin.blockinfile:
        path: /etc/nut/upsmon.conf
        block: |
          MONITOR apcups@localhost 1 admin your_password master
          SHUTDOWNCMD "/sbin/shutdown -h +0"
          create: true

    - name: Set NUT mode
      ansible.builtin.lineinfile:
        path: /etc/nut/nut.conf
        regexp: '^MODE='
        line: 'MODE=standalone'
        create: true

# Remove motd files, then add custom motd file
    - name: "Remove motd files: {{ item }}"
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/etc/update-motd.d/10-help-text"
        - "/etc/update-motd.d/50-motd-news"
        - "/etc/update-motd.d/91-contract-ua-esm-status"
        - "/etc/update-motd.d/50-landscape-sysinfo"
        - "/etc/update-motd.d/00-header"
        - "/etc/update-motd.d/95-hwe-eol"
        - "/etc/update-motd.d/97-overlayroot"
        - "/etc/update-motd.d/92-unattended-upgrades"
        - "/etc/default/motd-news"
        - "/var/cache/motd-news"
      loop_control:
        label: "{{ item }}"

    - name: Deploy the 00-zfs MOTD script
      template:
         src: Temps/00-zfs.j2
         dest: /etc/update-motd.d/00-zfs
         mode: '0755'

#Set git global author name and email
    - name: Set git global author name
      community.general.git_config:
        name: user.name
        value: "travisws"
        scope: global

    - name: Set git global author email
      community.general.git_config:
         name: user.email
         value: "traviswoodworthsmith@gmail.com"
         scope: global

# Install systemd service to make sure that zram is setup on boot
    - name: Deploy systemd service file from template
      ansible.builtin.template:
        src: Temps/zramsetup.service.j2
        dest: /etc/systemd/system/zramsetup.service
      notify: reload systemd

    - name: Enable and start ZRAM Setup service
      ansible.builtin.systemd:
        name: zramsetup.service
        state: started
        enabled: true
        daemon_reload: true

  handlers:
    - name: Reload ZFS settings
      ansible.builtin.command: update-initramfs -u
      listen: Reload ZFS settings
      register: zfssettings
      changed_when: zfssettings.rc != 0
      ignore_errors: true

    - name: Restart NUT services
      ansible.builtin.systemd:
         name: "{{ item }}"
         state: restarted
         enabled: true
      loop:
         - nut-server
         - nut-monitor

    - name: restart docker
      ansible.builtin.service:
        name: docker
        state: restarted

    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Restart ssh service
      ansible.builtin.service:
        name: ssh
        state: restarted

    - name: Apply Netplan
      command: netplan apply
